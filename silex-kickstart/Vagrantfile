# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant::Config.run do |config|

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise32"
  
  # Set ram to 1GByte
  config.vm.customize ["modifyvm", :id, "--memory", 1024]

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  config.vm.forward_port 80, 8080

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"
  
  # Enable symlinks
  config.vm.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root", "1"]
  
  # Use nfs sharing on mac/linux instead of guest additions
  # This will prompt for your password in order to init the nfs sharing 
  # on your host machine
  if (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) == nil
    config.vm.network :hostonly, "192.168.33.10"
    config.vm.share_folder("v-root", "/vagrant", ".", :nfs => true)
    config.nfs.map_uid = Process.uid
    config.nfs.map_gid = Process.gid
  end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding 
  # some recipes and/or roles.
  #
  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = ["app/config/cookbooks"]
    chef.add_recipe "basic"
    chef.add_recipe "ohai"
  #  chef.add_recipe "mysql::server"
    chef.add_recipe "php::module_apc"
    chef.add_recipe "php::module_sqlite3"
    chef.add_recipe "php::module_mysql"
    chef.add_recipe "php::module_curl"
    chef.add_recipe "php::module_xdebug"
    chef.add_recipe "php"
    chef.add_recipe "nginx"

    chef.json = {
        "mysql" => {
            "server_root_password" => ""
        }
    }  
  end
end
